name: Fraud Detection MLOps (Testing Branch)

on:
  workflow_dispatch:
    inputs:
      skip_simulate:
        description: "Skip simulate-year retraining?"
        required: false
        default: "false"

jobs:
  simulate-year:
    if: github.event.inputs.skip_simulate != 'true'
    runs-on: self-hosted
    env:
      API_KEY: ${{ secrets.API_KEY }}
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean old MLflow registry
        run: |
          rm -rf mlruns artifacts
          mkdir -p mlruns artifacts

      - name: Write .env for Docker Compose
        run: |
          echo "API_KEY=$API_KEY" > .env
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> .env
          echo "PORT=$PORT" >> .env
          cat .env

      - name: Clean up any stale containers
        run: |
          docker compose down || true
          docker compose rm -f || true

      - name: Build containers
        run: docker compose build

      - name: Prepare folders
        run: |
          mkdir -p mlruns artifacts data
          chmod -R 777 mlruns artifacts data

      - name: Generate monthly drifted datasets
        run: docker compose run --rm trainer python data/generate_monthly_data.py

      - name: Simulate one year of retraining with drift
        run: |
          for month in {1..12}; do
            echo "======================"
            echo " Month $month"
            echo "======================"

            docker compose run --rm trainer python training/train_model.py \
              --data-file data/fraud_month_${month}.csv

            docker compose run --rm promote

            echo " Month $month retrain + promotion complete"
          done

      - name: Upload mlruns registry
        uses: actions/upload-artifact@v4
        with:
          name: mlruns
          path: mlruns/

  validate-api:
    needs: [simulate-year]
    if: always()
    runs-on: self-hosted
    env:
      API_KEY: ${{ secrets.API_KEY }}
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download mlruns registry
        uses: actions/download-artifact@v4
        with:
          name: mlruns
          path: ./mlruns   # must match docker-compose.yml volume

      - name: Debug mlruns contents
        run: |
          echo "=== Debug: contents of ./mlruns ==="
          ls -R ./mlruns || true

      - name: Write .env for Docker Compose
        run: |
          echo "API_KEY=$API_KEY" > .env
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> .env
          echo "PORT=$PORT" >> .env
          cat .env

      - name: Ensure API is stopped
        run: |
          docker compose down api || true
          docker compose rm -f api || true

      - name: Start API
        run: |
          docker compose up -d api
          echo "Waiting for API startup..."

      - name: Wait for API prediction readiness
        run: |
          for i in {1..24}; do  # retry up to 2 minutes
            RESPONSE=$(curl -s -X POST "http://localhost:${PORT}/predict" \
              -H "Content-Type: application/json" \
              -H "x-api-key: $API_KEY" \
              -d '{
                "step": 100,
                "amount": 500,
                "type_CASH-IN": 0,
                "type_CASH-OUT": 1,
                "type_DEBIT": 0,
                "type_PAYMENT": 0,
                "type_TRANSFER": 0
              }' || true)
            echo "Attempt $i: $RESPONSE"
            if echo "$RESPONSE" | grep -q "prediction"; then
              echo " API is ready and returned a prediction"
              exit 0
            fi
            sleep 5
          done
          echo " API did not return prediction in time"
          docker compose logs api
          exit 1