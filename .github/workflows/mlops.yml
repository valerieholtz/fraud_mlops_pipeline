name: Fraud Detection MLOps (Testing Branch)

on:
  workflow_dispatch:  # manual trigger for demo

jobs:
  simulate-year:
    runs-on: self-hosted   # your local runner
    env:
      API_KEY: ${{ secrets.API_KEY }}
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write .env for Docker Compose
        run: |
          echo "API_KEY=$API_KEY" > .env
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> .env
          echo "PORT=$PORT" >> .env
          cat .env

      - name: Clean up any stale containers
        run: |
          docker compose down || true
          docker compose rm -f || true

      - name: Build containers
        run: docker compose build

      - name: Prepare folders
        run: |
          mkdir -p mlruns artifacts data
          chmod -R 777 mlruns artifacts data

      - name: Generate monthly drifted datasets
        run: docker compose run --rm trainer python data/generate_monthly_data.py

      - name: Simulate one year of retraining with drift
        run: |
          for month in {1..12}; do
            echo "======================"
            echo " Month $month"
            echo "======================"

            docker compose run --rm trainer python training/train_model.py \
              --data-file data/fraud_month_${month}.csv

            docker compose run --rm promote

            echo " Month $month retrain + promotion complete"
          done

  validate-api:
    runs-on: self-hosted
    needs: simulate-year   # runs only after training is done
    env:
      API_KEY: ${{ secrets.API_KEY }}
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write .env for Docker Compose
        run: |
          echo "API_KEY=$API_KEY" > .env
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> .env
          echo "PORT=$PORT" >> .env
          cat .env

      - name: Ensure API is stopped
        run: |
          docker compose down api || true
          docker compose rm -f api || true

      - name: Start API
        run: |
          docker compose up -d api
          echo " Waiting for API startup..."
          sleep 20

      - name: Validate API with health check
        run: |
          curl -s -o /dev/null -w "%{http_code}" \
            -H "x-api-key: $API_KEY" \
            http://localhost:${PORT}/health | grep 200
          echo " API health check passed"

      - name: Validate API with sample prediction
        run: |
          RESPONSE=$(curl -s -X POST "http://localhost:${PORT}/predict" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $API_KEY" \
            -d '{"amount": 500, "step": 100, "TRANSFER": 1, "PAYMENT": 0, "CASH_OUT": 0, "DEBIT": 0}')
          echo "Response: $RESPONSE"
          echo "$RESPONSE" | grep -q "prediction"
          echo " API prediction check passed"
