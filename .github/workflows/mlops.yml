name: Fraud Detection MLOps

on:
  schedule:
    - cron: "0 0 1 * *"   # retrain on the 1st of each month
  workflow_dispatch:       # allow manual trigger for testing

jobs:
  train-promote:
    runs-on: ubuntu-latest
    env:
      API_KEY: ${{ secrets.API_KEY }}   # inject GitHub secret
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # Ensure .env exists (fallback to .env.example if missing)
      - name: Prepare environment file
        run: |
          if [ ! -f .env ]; then
            echo "No .env found, copying from .env.example"
            cp .env.example .env
          fi
          # sync secret into .env for consistency
          grep -q '^API_KEY=' .env && sed -i "s/^API_KEY=.*/API_KEY=$API_KEY/" .env || echo "API_KEY=$API_KEY" >> .env
          cat .env

      # Make sure mlruns, data, and artifacts directories exist & are writable
      - name: Prepare folders
        run: |
          mkdir -p mlruns && chmod -R 777 mlruns
          mkdir -p data && chmod -R 777 data
          mkdir -p artifacts && chmod -R 777 artifacts

      - name: Build containers
        run: docker compose build

      # Initialize the SQLite database from CSV
      - name: Initialize fraud.db
        run: docker compose run --rm trainer python data/init_db.py

      - name: Run training
        run: docker compose run --rm trainer

      - name: Run promotion
        run: docker compose run --rm promote

      - name: Upload training artifacts (mlruns + plots + DB)
        uses: actions/upload-artifact@v4
        with:
          name: training-artifacts
          path: |
            mlruns/
            artifacts/
            data/fraud.db

  deploy-local:
    runs-on: self-hosted   # must run on your local runner
    needs: train-promote   # waits until training+promotion finished
    env:
      API_KEY: ${{ secrets.API_KEY }}
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      PORT: ${{ secrets.PORT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download training artifacts
        uses: actions/download-artifact@v4
        with:
          name: training-artifacts
          path: ./_ci_download

      - name: Replace local mlruns with promoted registry
        run: |
          mkdir -p mlruns
          rm -rf mlruns/*
          cp -r _ci_download/mlruns/* mlruns/
          chmod -R 777 mlruns

      #  Write proper .env for Docker Compose
      - name: Write .env for Docker Compose
        run: |
          echo "API_KEY=$API_KEY" > .env
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> .env
          echo "PORT=$PORT" >> .env
          echo ".env created for Docker Compose:"
          cat .env

      # === Restart API and validate ===
      - name: Restart API
        run: |
          docker compose down api || true
          docker compose up -d api
          echo "API restarted with .env"

      - name: Validate API with health check
        run: |
          echo "Waiting for API to start..."
          for i in {1..6}; do   # try up to 6 times (1 minute total)
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "x-api-key: $API_KEY" \
              http://localhost:${PORT}/health || true)
            if [ "$STATUS" = "200" ]; then
              echo "API health check passed."
              exit 0
            fi
            echo "Not ready yet (status=$STATUS), retrying in 10s..."
            sleep 10
          done
          echo "API failed to become healthy after 60s"
          docker compose logs api  # <-- print logs for debugging
          exit 1

      - name: Validate API with sample prediction
        run: |
          echo "Sending sample prediction request..."
          RESPONSE=$(curl -s -X POST "http://localhost:${PORT}/predict" \
            -H "Content-Type: application/json" \
            -H "x-api-key: $API_KEY" \
            -d '{"amount": 100.0, "step": 50, "TRANSFER": 1, "PAYMENT": 0, "CASH_OUT": 0, "DEBIT": 0}')
          echo "Response: $RESPONSE"
          echo "$RESPONSE" | grep -q "prediction"
          echo " API prediction check passed."